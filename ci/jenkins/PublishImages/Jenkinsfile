pipeline {
    options {
      skipDefaultCheckout true
     }
    agent {
        kubernetes {
            yaml '''
        spec:
          securityContext:
            runAsUser: 1000 # default UID of jenkins user in agent image
          containers:
          - name: kubectl
            image: bitnami/kubectl:1.27.14
            command:
            - cat
            tty: true
        '''
        }
    }
    stages {
        stage('Stage 1') {
            steps {
                echo "branch: $env.BRANCH_NAME"
                echo 'Hello world!'
            }
        }
        stage('sleep') {
            steps {
                script {
                    sleep 1
                }
            }
        }
        stage('list pod') {
            steps {
                container('kubectl') {
                    script {
                      // sh 'kubectl get pod'
                          // "ls -lah".execute().text.eachLine { line ->
                          //     echo line

                          // }
            
            def ret = tekton()

            def name = ret.split("/")[1].split(' ')[0]
                        // def ret = sh(script: 'kubectl ', returnStdout: true)
                        
                        sh """
                        kubectl logs ${name}-pod -f -n milvus-ci
                            """
                        
                        sh """
                        kubectl describe taskrun ${name} -n milvus-ci
                            """

                        // "kubectl get pod".execute().text.eachLine { line ->
                        //     echo line
                        // }
                        // "tkn task start hello".execute().text.eachLine { line ->
                        //     echo line
                        // }
                        // sh 'echo hello'
                    }
                }
            }
        }
    }
}

def tekton() {

  def input = """

    cat << EOF | kubectl apply -f -
    apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      name: hello-task-run
      namespace: milvus-ci
    spec:
      taskRef:
        name: hello
    EOF

"""
  
  println input
  // sh "echo $input"

  def ret = sh ( script: input, returnStdout: true)

    return ret

}
